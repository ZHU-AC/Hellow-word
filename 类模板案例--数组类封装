#pragma once
#include<iostream>
using namespace std;

template<class T>
class MyArry
{
public:
	MyArry(int m_catacity)
	{
		cout << "构造函数调用" << endl;
	this->m_catacity	=m_catacity;
	paddress = new T[this->m_catacity];
		m_size = 0;
	}
	MyArry( const  MyArry&arr)
	{
		cout << "拷贝函数调用" << endl;

		this->m_size = arr.m_size;
		this->m_catacity = arr.m_catacity;
		this->paddress = new T[arr.m_catacity];
		for (int i = 0; i < arr.m_catacity; i++)
		{
			this->paddress[i]=arr.paddress[i];
		}
	}
	//防止浅拷贝问题	operator=

	MyArry&	operator=(const  MyArry&arr)
	{
		cout << "operator=函数调用" << endl;

		if (this->paddress != NULL)//先判断原来堆区有无数据，如果有先释放
		{


			delete[]this->paddress;
			this->paddress = NULL;
			this->m_size = 0;
			this->m_catacity = 0;

		}
		//深拷贝
		this->m_size = arr.m_size;
		this->m_catacity = arr.m_catacity;
		this->paddress = new T[arr.m_catacity];
		for (int i = 0; i < arr.m_catacity; i++)
		{
			this->paddress[i] = arr.paddress[i];
		}


		return *this;

	}

	//尾插法
	void  push_arr(T mm)
	{
		if (this->m_size == this->m_catacity)
		{
			return;
		}
		this->paddress[this->m_size] = mm;
		this->m_size++;
	}
	//尾删法
	void  del_arr()
	{
		if (this->m_size == 0)
		{
			return;

		}
		this->m_size--;
	}
	//通过下标来访问数组的数据   arr【10】=100   想赋值这个arr【10】应该是的地址的名字
	T& operator[](int index)
	{
		return  this->paddress[index];
	}
	//返回数组容量
	int getcapacity()
	{
		return this->m_catacity
	}
	int  getsize()
	{
		return  this->m_size;
	}
	~MyArry()
	{
		cout << "析构函数调用" << endl;
		if (this->paddress != NULL)
		{
			delete []paddress;
			paddress = NULL;
		}
		delete paddress;
	}
private:
	T* paddress;
	int m_size;//大小
	int m_catacity;//容量


};












#include<iostream>
#include"MyArry.hpp"
void text()
{
	MyArry<int>arr1(5);
	//利用尾插法向数组中插入数据
	for (int i = 0; i < 5; i++)
	{
		arr1.push_arr(i);
	
	}

	//MyArry<int>arr2(arr1);
	//MyArry<int>arr3(100);
	//arr1 = arr3;
}



int main()
{
	text();
	system("pause");
	return 0;
}










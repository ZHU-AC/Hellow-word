#include"slnklist.h"


int main()
{
	linklist  head =creatbyqueue();
	print(head);

	Insert(head,5);
	print(head);

	getchar();
	getchar();
	return 0;

}
#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <stdlib.h>
#include<string>
typedef int datatype;
typedef struct node{
	datatype data;
	struct node *next;
}Lnode, *linklist;

/******************************************/
/*�������ƣ�creatbystack() 		          */
/*�������ܣ�ͷ�巨������ͷ���ĵ�����    */
/******************************************/

linklist creatbystack()
{
	linklist  head, s;
	datatype x;
	head = (linklist)malloc(sizeof(Lnode));
	head->next = NULL;
	printf("�����������������У���0�������룩:\n");
	scanf("%d", &x);
	while (x != 0)
	{
		s = (linklist)malloc(sizeof(Lnode));
		s->data = x;
		s->next = head->next;
		head->next = s;
		scanf("%d", &x);
	}
	return head;
}

/*****************************************/
/*�������ƣ�creatbyqueue() 			 */
/*�������ܣ�β�巨������ͷ���ĵ�����   */
/*****************************************/
linklist creatbyqueue()
{
	linklist head, r, s;
	datatype x;
	head = r = (linklist)malloc(sizeof(Lnode));
	head->next = NULL;
	printf("�����������������У���0�������룩:\n");
	scanf("%d", &x);
	while (x != 0)
	{
		s = (linklist)malloc(sizeof(Lnode));
		s->data = x;
		r->next = s;
		r = s;
		scanf("%d", &x);
	}
	r->next = NULL;
	return head;
}

/************************************/
/*�������ƣ�print()		 		*/
/*�������ܣ������ͷ���ĵ�����    */
/************************************/
void print(linklist head)
{
	linklist p;
	int i = 0;
	p = head->next;
	while (p)
	{
		printf("%5d", p->data);
		i++;
		if (i % 10 == 0)    printf("\n");
		p = p->next;
	}
	printf("\n\n");
}

/***********************************/
/*�������ƣ�delList()		 	   */
/*�������ܣ��ͷŴ�ͷ���ĵ�����   */
/***********************************/
void delList(linklist head)
{
	linklist p = head->next;
	while (p)
	{
		head->next = p->next;
		free(p);
		p = head->next;
	}
	free(head);
}

void  ListInsert(linklist head, int infor, int putinfor)
{
	linklist p = head->next;
	linklist  s;
	while (p->data != infor)
	{
		p = p->next;
		if (p->next == NULL)
		{
			s = (linklist)malloc(sizeof(Lnode));
			s->data = putinfor;
			s->next = p->next;
			p->next = s;
			return;
		}
	}
	s = (linklist)malloc(sizeof(Lnode));
	s->next = p->next;
	p->next = s;
}
void delx(linklist head, datatype x)
{
	linklist p = head;
	while (p->next->data != x)
	{
		p = p->next;
	}
	linklist q= p->next;
	p->next = p->next->next;
	free(q);

}
void Insert(linklist &head, datatype  x)
{
	linklist s = (linklist)malloc(sizeof(Lnode));
	s->data = x;
	linklist  p = head;
	if (p->next->data > x)
	{
		s->next = p->next;
		p->next = s;
		return;
	}
	linklist q = p->next;
	while (q->next != NULL)
	{
		p = p->next;
		q = q->next;
		if (q->data > x)
		{
			s->next = q;
			p->next = s;
			return;
		}
	}
	s->next = q->next;
	q->next = s;
}
bool rePe(int a,linklist h3)
{
	linklist ss = h3->next;
	while (ss != NULL)
	{
		if (ss->data == a)
		{
			return true;
		}
		else
		{
			ss = ss->next;
		}
	}
	return false;

}












linklist interSection(linklist h1,linklist h2)
{
	linklist p1 = h1->next;
	linklist p2 = h2->next;
	linklist h3 = (linklist)malloc(sizeof(Lnode));
	h3->next = NULL;

	int a = 0;//搜索h1
	int sum1 = 0;
	int sum2 = 0;
	while (p1 != NULL)
	{
		p1 = p1->next;
		sum1 = sum1 + 1;
	}
	while (p2!= NULL)
	{
		p2 = p2->next;
		sum2 = sum2 + 1;
	}

	 p1 = h1->next;
	 p2 = h2->next;

	
	if (sum1>sum2)
	{
		while (p1!= NULL)
		{
			a = p1->data;


			bool ret=rePe(a, h3);
			p1 = p1->next;
			p2 = h2->next;
			while (p2 != NULL)
			{
				if ((p2->data == a )&&ret==false)
				{
					linklist s = (linklist)malloc(sizeof(Lnode));
					s->data = a;
					s->next = h3->next;
					h3->next = s;
					break;

				}
				p2 = p2->next;
			}
		}
		return h3;
	}
	else
	{
		while (p2 != NULL)
		{
			a = p2->data;


			bool ret = rePe(a, h3);
			p2 = p2->next;
			p1 = h1->next;
			while (p1 != NULL)
			{
				if ((p1->data == a) && ret == false)
				{
					linklist s = (linklist)malloc(sizeof(Lnode));
					s->data = a;
					s->next = h3->next;
					h3->next = s;
					break;

				}
				p1 = p1->next;
			}
		}
		return h3;

	}	
}
	



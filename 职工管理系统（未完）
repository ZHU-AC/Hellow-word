
#include<iostream>
#include<string>
using namespace std;
#include"worker.h"
//������
class manager :public worker 
{
public:
	manager(int ID, string name, int did);
	virtual void showInfo() ;//��ʾ������Ϣ
	virtual string getDeptname() ;//��ȡ��λ����

};
#pragma once//��ֹͷ�ļ��ظ�����
#include<iostream>
using namespace std;
//����  ÿ��Ա�����е����Ժ���Ϊ
class worker{
public:
	int  m_id;//Ա�����
	string m_name;//Ա������
	int m_deptID;//ְ�����ڲ������Ʊ��
	virtual void showInfo() = 0;//��ʾ������Ϣ
	virtual string getDeptname() = 0;//��ȡ��λ����

};

#include"workermanager.h"//����ļ���ʵ�������ĺ���
#include<string>
#include"employee.h"
#include"boss.h"
#include"manager.h"


   workerManager:: workerManager()//����֮��������������ʵ�֣���������ʼ��
	{
	   //1.����ļ������ڵĳ�ʼ��ģʽ
	   ifstream ifs;//�����ļ�������
	   ifs.open(FILENAME, ios::in);
	   if (!ifs.is_open())
	   {
		   cout << "�ļ������ڣ�δ������" << endl;//�������
		   this->empArry = NULL;//��ʼ��  ��������worker*
		   this->empnum = 0;//��ʼ����¼��Ա��
		   this->filesEmpty = true;//�ļ�������Ϊ��
		   ifs.close();//�ر��ļ�
		   return;//?
	   }
	   //2.�ļ����� ����Ϊ�յĳ�ʼ��ģʽ
	   char ch;
	   ifs >> ch;//?
	   if (ifs.eof())//�ļ�Ϊ�ս���if
	   {
		   cout << "�ļ�Ϊ��" << endl;
		   this->empArry = NULL;//��ʼ��
		   this->empnum = 0;//��ʼ����¼��Ա��
		   this->filesEmpty = true;//�ļ�������Ϊ�棿
		   ifs.close();//�ر��ļ�
		   return;//?

	   }
	   //3.�ļ����ڲ������ݴ��ڵĳ�ʼ����ʽ
	   int num = this->get_EmpNum();//����ļ��е�����
	   cout << "�ļ�����ְ��" << num << "��" << endl;
	   this->empnum = num;
	   //�����ڴ��Ŵ��ļ��ж�ȡ������
	   this->empArry=new worker*[this->empnum];
	   this->init_emp();
	   ////���Դ���
	   //for (int i = 0; i < this->empnum; i++){
		  // cout << "ְ��ID��" << empArry[i]->m_id << "  " << "ְ��������" << this->empArry[i]->m_name
			 //  << " " << "ְ�����ű�ţ�" << empArry[i]->m_deptID << endl;
	   /*}*/


	}
   workerManager::~workerManager()
	{
	   if (this->empArry != NULL)//���������ֶ��ͷ�
	   {
		   delete[] this->empArry;
		   this->empArry = NULL;
	   }

	}
   void  workerManager::showMune()//չʾ�˵��ĺ���ʵ��
   {
	   cout << "************************************************" << endl;
	   cout << "******************��ӭʹ��ְ������ϵͳ!*********" << endl;
	   cout << "**********************0.�˳���������*************" << endl;
	   cout << "**********************1.����ְ����Ϣ*************" << endl;
	   cout << "**********************2.��ʾְ����Ϣ*************" << endl;
	   cout << "**********************3.ɾ����ְְ��*************" << endl;
	   cout << "**********************4.�޸�ְ����Ϣ*************" << endl;
	   cout << "**********************5.����ְ����Ϣ*************" << endl;
	   cout << "**********************6.���ձ������*************" << endl;
	   cout << "**********************7.��������ĵ�*************" << endl;
	   cout << "************************************************" << endl;
	   cout << "************************************************" << endl;

   }
   void workerManager::exitSystem()
   {
	   cout << "��ӭ�´�ʹ��" << endl;
	   system("pause");
	   exit(0);
   }
   bool workerManager::junumber(int id)//�ж���Ų��ظ��ĺ���
   {
	   bool flagg = false;
	   for (int i = 0; i < this->empnum; i++){
		   if (this->empArry[i]->m_id == id){
			   cout << "����ظ�,����������" << endl;
			   
			   flagg = true;//���ظ�������
		   }
	   }
	   return flagg;
   }
   void workerManager::addEmp()//����ְ��������ʵ��
   {
	   cout << "�������������ӵ�ְ������" << endl;
	   int addNum = 0;
	   cin >> addNum;//�������ְ��������
	   if (addNum > 0)
	   {
		   int newSize = addNum + empnum; //���㿪���¿ռ�Ĵ�С,�µ�ְ������
		   worker** newSpace=new worker*[newSize];   //�����¿ռ�
		   if (this->empArry != NULL)
		   {
			   for (int i = 0; i < empnum; i++)  //���ԭ�������ݽ�ԭ���ռ��µ����ݿ������¿ռ�
			   {
				   newSpace[i] = empArry[i];
			   }

		   }
		   for (int i = 0; i < addNum; i++) //��������������
		   {
			   int id;
			   int dsid;
			   string name;
			    FLAG:
			   cout << "�������" << i + 1 << "�����ӵ�ְ���ı��" << endl;
			   cin >> id;
			   if (junumber(id)){
				   i--;
				   continue;//��������ѭ����δִ�еĲ��֣�ִ����һ�ε�ѭ��
			   }
			   
			  
			   
			   cout << "�������" << i + 1 << "�����ӵ�ְ��������" << endl;
			   cin >> name;
			   cout << "��ѡ��ְ���ĸ�λ" << endl;
			   cout << "1.��ְͨ��" << endl;
			   cout << "2.����" << endl;
			   cout << "3.�ϰ�" << endl;
			   cin >> dsid;
			   worker * worker = NULL;//����һ��ְ��ָ����ܲ�ͬ����
			   switch (dsid)
			   {
			   case 1:worker = new employee(id, name, 1);
				   break;
			   case 2:worker = new manager(id, name, 2);
				   break;
			   case 3:worker = new boss(id, name, 3);
				   break;
			   default:
				   break;
			   }
			   //�������ӵ�ְ�����������飬Ҳ���ǰ��µ�worker*��ɵ�worker*��һ��     ��ͼ����
			   newSpace[empnum + i] = worker;
			  
		   }
		   //�ͷ�ԭ�еĿռ�??
		   delete[] this->empArry;
		   //�����¿ռ��ָ��?
		   this->empArry = newSpace;
		   //����ְ������
		   this->empnum = newSize;

		   //��ʾ���ӳɹ�
		   cout << "�ɹ�����" << addNum << "��ְ��" << endl;
		   this->filesEmpty = false;//���ӳɹ��ļ���Ϊ�գ��жϣ�
		   saveFile();//����д���ļ��ĺ���
		   

	   }
	   else
	   {
		   cout << "������������" << endl;
		   
	   }
	   system("pause");
	   system("cls");
   }
   void workerManager::saveFile()//�����ļ��ĺ���ʵ��
   {
	   ofstream ofs;
	   ofs.open(FILENAME, ios::out);//������ķ�ʽ���ļ�----д�ļ� Ϊд�ļ������ļ�
	   for (int i = 0; i < this->empnum; i++)//��ÿ���˵���Ϣд���ļ�
	   {
		   ofs << this->empArry[i]->m_id << " "<< this->empArry[i]->m_name << " " << this->empArry[i]->m_deptID << endl;
	   }
	   ofs.close();

   }
   int workerManager::get_EmpNum()//�õ��ļ��е�����
   {
	   int num = 0;
	   int id;
	   string name;
	   int did;
	   ifstream ifs;//������������ļ�
	   ifs.open(FILENAME, ios::in);//���ļ�
	   while (ifs >> id&&ifs >> name&&ifs >> did)
	   {
		   num++;
	   }
	   ifs.close();
	   return num;
   }
   void workerManager::init_emp()//��ʼ��Ա���ĺ���
   {
	   int index = 0;
	   int id;
	   string name;
	   int did;
	   ifstream ifs;
	   ifs.open(FILENAME, ios::in);
	   while (ifs >> id&&ifs >> name&&ifs >> did)
	   {
		   worker* worker = NULL;
		   if (did == 1){

			   worker = new employee(id, name, did);
		   }
		   else if (did == 2){

			   worker = new manager(id, name, did);
		   }
		   else
		   {
			   worker = new boss(id, name, did);
		   }
		   this->empArry[index] = worker;//��ʱ���ļ���ȡ�����ݴ����emparry������
		   index++;

	
	   }


		   
   }
   void workerManager::show_emp()//��ʾְ���ĺ���
   {
	   if (filesEmpty)
	   {
		   cout << "�ļ������ڻ����ݲ�����" << endl;
	   }
	   else
	   {
		   for (int i = 0; i < this->empnum; i++){
			   this->empArry[i]->showInfo();

		   }
	   }
	   system("pause");
	   system("cls");
   }
   void workerManager::Del_emp()//ɾ��ְ���ĺ���
   {
	   cout << "��������ɾ��ְ����ID" << endl;
	   int id;
	   cin >> id;
	  int  index=IsExist(id);//�ж�ְ���Ƿ����  ������ɾ��ְ����������±�
	   if (index==-1){
		   cout << "��ɾ����ְ��������" << endl;
	   }
	   else{
		   for (int i = index; i < this->empnum - 1; i++){
			   this->empArry[i] = this->empArry[i + 1];
		   }
		   this->empnum--;//ɾ����ְ��������һ
		   cout << "ɾ���ɹ�" << endl;
		   this->saveFile();
	   }
	   system("pause");
	   system("cls");

   }
   int workerManager::IsExist(int id)//ͨ��ְ��id�ж�ְ���Ƿ����
   {
	   int index = -1;//�����±���û��-1�ģ������������
	   for (int i = 0; i < this->empnum; i++){
		   if (this->empArry[i]->m_id == id){
			   //�ҵ���ְ��
			   index = i;
			   break;//�˳�ѭ��

		   }
	   }
	   return index;//�����������еĵڼ���λ��
   }
   void workerManager::Mod_Emp()//�޸�ְ���ĺ���
   {
	   if (this->filesEmpty){
		   cout << "�ļ������ڻ��¼Ϊ��" << endl;
	   }
	   else{
		   cout <<"��������Ҫ�޸ĵ�ְ����ID" << endl;
		   int id;
		   cin >> id;
		 //�жϸ�ְ���Ƿ����
		  int index= this->IsExist(id);//index==-1 or �������ID���±�
		  if (index == -1){
			  cout << "���޴���" << endl;
		  }
		  else
		  {
			  delete this->empArry[index];
			  int newid=0;
			  string newname="";
			  FLag:
			  cout <<"�鵽ID"<<id<<"��"<<"��ְ��"<<endl<< "��������Ҫ�޸ĵ�ID" << endl;
			  cin >> newid;
			  if (this->junumber(newid)){//�ж�ID�Ƿ��ظ�
				  cout << "�޸ĵ�ID�Ѿ����ڣ�����������" << endl;
				  goto FLag;//������ظ��ı�ž͵���ȥ
			  }
			  
			  cout << "��������Ҫ�޸ĵ�����" << endl;
			  cin >> newname;
			  cout << "��ѡ���޸ĵĲ���" << endl;
			  cout << "1.��ְͨ��" << endl;
			  cout << "2.����" << endl;
			  cout << "3.�ϰ�" << endl;
			  int newdid=0;
			  cin >> newdid;
			  worker*worker = NULL;
			  switch (newdid)
			  {
			  case 1:worker=new employee(newid, newname, 1);
				  break;
			  case 2:worker = new manager(newid, newname, 2);
				  break;
			  case 3:worker = new boss(newid, newname, 3);
				  break;
			  default:
				  break;
			  }
			  //�������ݵ�������
			 this->empArry[index] =worker;
			 cout << "�޸ĳɹ�" << endl;
			  this->saveFile();


		  }
	   }
	   system("pause");
	   system("cls");
   }
   void workerManager::Find_Emp()//����ְ��
   {
	   if (this->filesEmpty){
		   cout << "�ļ������ݲ�����" << endl;
	   }
	   else{
		   cout << "��ѡ����ҵķ�ʽ" << endl;
		   cout << "1.ID����" << endl;
		   cout << "2.��������" << endl;
		   int select = 0;
		   cin >> select;
		   //ID����
		   if (select == 1){
			   cout << "����������ְ����ID" << endl;
			   int fid;
			   cin >> fid;
			   //�жϸ�ID�Ƿ����
			   int ret=this->IsExist(fid);
			   if (ret != -1){
				   this->empArry[ret]->showInfo();
			   }
			   else{
				   cout << "���޴���" << endl;
			   }
		   }
		   //��������
		   else if (select == 2){
			   cout << "����������ְ��������" << endl;
			   string finame = "";
			   cin >> finame;
			   bool findempname = false;//Ĭ�ϲ������ֲ�����
			   for (int i = 0; i < this->empnum; i++){
				   if (this->empArry[i]->m_name == finame){
					   cout << "���ҳɹ�,ְ��  " << this->empArry[i]->m_name << " ����Ϣ����" << endl;
					   this->empArry[i]->showInfo();
					   findempname = true;
				   }
			   }
			   if (findempname == false){
				   cout << "����ʧ��" << endl;
			   }
		   }

		   else{
			   cout << "�������" << endl;
		   }

	   }
	   system("pause");
	   system("cls");
   }

   void workerManager::Sort_Emp()//����ְ���ĺ���
   {
	   if (this->filesEmpty){
		   cout << "�ļ������ݲ�����" << endl;
		   system("pause");
		   system("cls");

	   }
	   else{
		   cout << "ѡ����������ʽ" << endl;
		   cout << "1.����ID����" << endl;
		   cout << "2.����ID����" << endl;
		   int select = 0;
		   cin >> select;

		   for (int i = 0; i < this->empnum; i++)
		   {
			   int mixOrmin = i;
			   for (int j = i + 1; j < this->empnum; j++)
			   {
				   //����
				   if (select == 1)
				   {
					   if (this->empArry[mixOrmin]->m_id>this->empArry[j]->m_id)
					   {
						   mixOrmin = j;
					   }
				   }
				   //����
				   if (select == 2)
				   {
					   if (this->empArry[mixOrmin]->m_id < this->empArry[j]->m_id)
					   {
						   mixOrmin = j;
					   }
				   }
			   }
			   if (mixOrmin != i)
			   {
				   worker*temp = NULL;
				   temp = this->empArry[i];
				   this->empArry[i] = this->empArry[mixOrmin];
				   this->empArry[mixOrmin] = temp;
			   }
			   

		   }
		   cout << "�������" << endl;
		   this->saveFile();
		   this->show_emp();
				 
	   }
   }


   void workerManager::Clean_Emp()//��ղ���
   {
	   cout << "ȷ����գ�" << endl;
	   cout << "1.yes" << endl;
	   cout << "2.no" << endl;
	   int select = 0;
	   cin >> select;

	   if (select == 1)
	   {
		   ofstream ofs;
		   ofs.open(FILENAME, ios::trunc);//������ļ�
		   //����ڴ�
		   if (this->empArry != NULL)
		   {
			   for (int i = 0; i < this->empnum; i++)//������ÿ��Ԫ���ͷ�
			   {
				   delete this->empArry[i];
				   this->empArry[i] = NULL;
			   }
		   }
		   delete[] this->empArry;//�ͷŶ�������ָ��
		   this->empArry = NULL;
		   this->empnum = 0;
		   this->filesEmpty = true;
		   cout << "������" << endl;
	   }
	   system("pause");
	   system("cls");

   }

#pragma once//��ֹͷ�ļ��ظ�����
#include<iostream>
#include"worker.h"
#include<fstream>//�ļ�������ͷ�ļ�
#define FILENAME "empFile.txt" 
using namespace std;
class workerManager
{
public:
	workerManager();//ͷ�ļ�������
	~workerManager();
	void showMune();//չʾ�˵�
	void exitSystem();//�˳�ϵͳ
	worker** empArry;//ְ������ָ��
	void addEmp();//����ְ���ĺ�������
	void saveFile(); //�����ļ��ĺ�������
	bool filesEmpty;//�ж��ļ��Ƿ���ں������Ƿ�Ϊ�յı�־
	int get_EmpNum();//�õ��ļ��е�����
	int empnum;//��¼ְ������
	void init_emp();//��ʼ��Ա���ĺ���
	void show_emp();//��ʾְ���ĺ���
	void Del_emp();//ɾ��ְ���ĺ���
	int IsExist(int id);//ͨ��ְ��id�ж�ְ���Ƿ����
	void Mod_Emp();//�޸�ְ���ĺ���
	void Find_Emp();//����ְ��
	bool junumber(int id);//�ж���Ų��ظ��ĺ���
	void Sort_Emp();//����ְ���ĺ���
	void Clean_Emp();//��ղ���


};
#include<iostream>
#include<string>
#include"workermanager.h"
#include"worker.h"
#include"employee.h"
#include"boss.h"
#include"manager.h"
using namespace std;
void text()
{

}
int main()
{
	
	workerManager wm;//ʵ��������
	int userChoice = 0;
	while (true)
	{
		wm.showMune();//չʾ�˵�
		cout << "������ѡ��" << endl;
		cin >> userChoice;
		switch (userChoice)
		{
		case 0:wm.exitSystem();//����0.�����˳�������ʵ���˳�ϵͳ
			break;
		case 1:wm.addEmp();//����ְ��
			break;

		case 2:wm.show_emp();//��ʾְ��
			break;
		case 3:wm.Del_emp();//ɾ��ְ��
			break;
		case 4:wm.Mod_Emp();//�޸�ְ����Ϣ
			break;
		case 5:wm.Find_Emp();//����ְ��
			break;
		case 6:wm.Sort_Emp();//����
			break;
		case 7:wm.Clean_Emp();
			break;
		default:system("cls");//ѡ����������
			break;
		}
	}
	





	system("pause");
	return 0;
}

#include"boss.h"
boss::boss(int ID, string name, int did)
{
	this->m_id = ID;
	this->m_name = name;
	this->m_deptID = did;
}
void boss::showInfo()//��ʾ������Ϣ
{
	cout << "ְ����� ��" << m_id << "\t" << "ְ������ ��" << m_name << "\t\t" << "ְ�����ڵ�λ��� ��" << m_deptID << "\t" << "ְ��ְ�� :" << "����������˾����" << endl;

}
string boss::getDeptname()//��ȡ��λ����
{
	return string("�ϰ�");
}



#pragma once
#include<iostream>
#include<string>
using namespace std;
#include"worker.h"
//�ϰ���
class boss :public worker
{
public:
	boss(int ID, string name, int did);
	virtual void showInfo();//��ʾ������Ϣ
	virtual string getDeptname();//��ȡ��λ����

};
#include"employee.h"

void employee::showInfo()//��ʾ������Ϣ
{
	cout << "ְ����� ��" << m_id << "\t" << "ְ������ ��" << m_name << "\t\t" << "ְ�����ڵ�λ��� ��" << m_deptID << "\t" << "ְ��ְ�� :" << "���վ�����Ҫ����" << endl;
}
string  employee::getDeptname() //��ȡ��λ����
{
	return string("��ְͨ��");
}
employee::employee(int ID, string name, int did)//���캯��
{
	this->m_id = ID;
	this->m_name = name;
	this->m_deptID = did;

}

#pragma once//��ֹͷ�ļ��ظ�����
#include<iostream>
#include<string>
#include"worker.h"
using namespace std;
class employee :public worker
{
public:
	employee(int ID,string name ,int did);//���캯��
	virtual void showInfo() ;//��ʾ������Ϣ
	virtual string getDeptname() ;//��ȡ��λ����
	
	

};

#pragma once
#include "manager.h"

manager::manager(int ID, string name, int did)
{
	this->m_id = ID;
	this->m_name = name;
	this->m_deptID = did;
	
}
void manager::showInfo()//��ʾ������Ϣ
{
	cout << "ְ����� ��" << m_id << "\t" << "ְ������ ��" <<m_name << "\t\t" << "ְ�����ڵ�λ��� ��" <<m_deptID << "\t" << "ְ��ְ�� :" << "�����ϰ�����񣬸���ͨԱ����������" <<endl;
}
string manager::getDeptname()//��ȡ��λ����
{
	return string("����");
}

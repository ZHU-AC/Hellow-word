#include"employee.h"

void employee::showInfo()//��ʾ������Ϣ
{
	cout << "ְ����� ��" << m_id << "\t" << "ְ������ ��" << m_name << "\t\t" << "ְ�����ڵ�λ��� ��" << m_deptID << "\t" << "ְ��ְ�� :" << "���վ�����Ҫ����" << endl;
}
string  employee::getDeptname() //��ȡ��λ����
{
	return string("��ְͨ��");
}
employee::employee(int ID, string name, int did)//���캯��
{
	this->m_id = ID;
	this->m_name = name;
	this->m_deptID = did;

}

#pragma once//��ֹͷ�ļ��ظ�����
#include<iostream>
#include<string>
#include"worker.h"
using namespace std;
class employee :public worker
{
public:
	employee(int ID,string name ,int did);//���캯��
	virtual void showInfo() ;//��ʾ������Ϣ
	virtual string getDeptname() ;//��ȡ��λ����
	
	

};

#pragma once
#include "manager.h"

manager::manager(int ID, string name, int did)
{
	this->m_id = ID;
	this->m_name = name;
	this->m_deptID = did;
	
}
void manager::showInfo()//��ʾ������Ϣ
{
	cout << "ְ����� ��" << m_id << "\t" << "ְ������ ��" <<m_name << "\t\t" << "ְ�����ڵ�λ��� ��" <<m_deptID << "\t" << "ְ��ְ�� :" << "�����ϰ�����񣬸���ͨԱ����������" <<endl;
}
string manager::getDeptname()//��ȡ��λ����
{
	return string("����");
}


#include<iostream>
#include<string>
using namespace std;
#include"worker.h"
//������
class manager :public worker 
{
public:
	manager(int ID, string name, int did);
	virtual void showInfo() ;//��ʾ������Ϣ
	virtual string getDeptname() ;//��ȡ��λ����

};
#pragma once//��ֹͷ�ļ��ظ�����
#include<iostream>
using namespace std;
//����  ÿ��Ա�����е����Ժ���Ϊ
class worker{
public:
	int  m_id;//Ա�����
	string m_name;//Ա������
	int m_deptID;//ְ�����ڲ������Ʊ��
	virtual void showInfo() = 0;//��ʾ������Ϣ
	virtual string getDeptname() = 0;//��ȡ��λ����

};

#include"workermanager.h"//����ļ���ʵ�������ĺ���
#include<string>
#include"employee.h"
#include"boss.h"
#include"manager.h"


   workerManager:: workerManager()//����֮��������������ʵ�֣���������ʼ��
	{
	   this->empArry = NULL;//��ʼ��
	   this->empnum = 0;//��ʼ��
	}
   workerManager::~workerManager()
	{

	}
   void  workerManager::showMune()//չʾ�˵��ĺ���ʵ��
   {
	   cout << "************************************************" << endl;
	   cout << "******************��ӭʹ��ְ������ϵͳ!*********" << endl;
	   cout << "**********************0.�˳���������*************" << endl;
	   cout << "**********************1.����ְ����Ϣ*************" << endl;
	   cout << "**********************2.��ʾְ����Ϣ*************" << endl;
	   cout << "**********************3.ɾ����ְְ��*************" << endl;
	   cout << "**********************4.�޸�ְ����Ϣ*************" << endl;
	   cout << "**********************5.����ְ����Ϣ*************" << endl;
	   cout << "**********************6.���ձ������*************" << endl;
	   cout << "**********************7.��������ĵ�*************" << endl;
	   cout << "************************************************" << endl;
	   cout << "************************************************" << endl;

   }
   void workerManager::exitSystem()
   {
	   cout << "��ӭ�´�ʹ��" << endl;
	   system("pause");
	   exit(0);
   }
   void workerManager::addEmp()//����ְ��������ʵ��
   {
	   cout << "�������������ӵ�ְ������" << endl;
	   int addNum = 0;
	   cin >> addNum;//�������ְ��������
	   if (addNum > 0)
	   {
		   int newSize = addNum + empnum; //���㿪���¿ռ�Ĵ�С,�µ�ְ������
		   worker** newSpace=new worker*[newSize];   //�����¿ռ�
		   if (this->empArry != NULL)
		   {
			   for (int i = 0; i < empnum; i++)  //���ԭ�������ݽ�ԭ���ռ��µ����ݿ������¿ռ�
			   {
				   newSpace[i] = empArry[i];
			   }

		   }
		   for (int i = 0; i < addNum; i++) //��������������
		   {
			   int id;
			   int dsid;
			   string name;
			   cout << "�������" << i + 1 << "�����ӵ�ְ���ı��" << endl;
			   cin >> id;
			   
			   cout << "�������" << i + 1 << "�����ӵ�ְ��������" << endl;
			   cin >> name;
			   cout << "��ѡ��ְ���ĸ�λ" << endl;
			   cout << "1.��ְͨ��" << endl;
			   cout << "2.����" << endl;
			   cout << "3.�ϰ�" << endl;
			   cin >> dsid;
			   worker * worker = NULL;//����һ��ְ��ָ����ܲ�ͬ����
			   switch (dsid)
			   {
			   case 1:worker = new employee(id, name, 1);
				   break;
			   case 2:worker = new manager(id, name, 2);
				   break;
			   case 3:worker = new boss(id, name, 3);
				   break;
			   default:
				   break;
			   }
			   //�������ӵ�ְ�����������飬Ҳ���ǰ��µ�worker*��ɵ�worker*��һ��
			   newSpace[empnum + i] = worker;
			   //�ͷ�ԭ�еĿռ�??
			   delete[] this->empArry;
			   //�����¿ռ��ָ��?
			   this->empArry = newSpace;
			   //����ְ������
			   this->empnum = newSize;
			  
		   }
		   //��ʾ���ӳɹ�
		   cout << "�ɹ�����" << addNum << "��ְ��" << endl;

	   }
	   else
	   {
		   cout << "������������" << endl;
		   
	   }
	   system("pause");
	   system("cls");
   }




#pragma once//��ֹͷ�ļ��ظ�����
#include<iostream>
#include"worker.h"
using namespace std;
class workerManager
{
public:
	workerManager();//ͷ�ļ�������
	~workerManager();
	void showMune();//չʾ�˵�
	void exitSystem();//�˳�ϵͳ
	int empnum;//��¼ְ������
	worker** empArry;//ְ������ָ��
	void addEmp();//����ְ���ĺ�������


};
#include<iostream>
#include<string>
#include"workermanager.h"
#include"worker.h"
#include"employee.h"
#include"boss.h"
#include"manager.h"
using namespace std;
void text()
{

}
int main()
{
	
	workerManager wm;//ʵ��������
	int userChoice = 0;
	while (true)
	{
		wm.showMune();//չʾ�˵�
		cout << "������ѡ��" << endl;
		cin >> userChoice;
		switch (userChoice)
		{
		case 0:wm.exitSystem();//����0.�����˳�������ʵ���˳�ϵͳ
			break;
		case 1:wm.addEmp();
			break;

		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		default:system("cls");//ѡ����������
			break;
		}
	}
	





	system("pause");
	return 0;
}

#include"boss.h"
boss::boss(int ID, string name, int did)
{
	this->m_id = ID;
	this->m_name = name;
	this->m_deptID = did;
}
void boss::showInfo()//��ʾ������Ϣ
{
	cout << "ְ����� ��" << m_id << "\t" << "ְ������ ��" << m_name << "\t\t" << "ְ�����ڵ�λ��� ��" << m_deptID << "\t" << "ְ��ְ�� :" << "����������˾����" << endl;

}
string boss::getDeptname()//��ȡ��λ����
{
	return string("�ϰ�");
}



#pragma once
#include<iostream>
#include<string>
using namespace std;
#include"worker.h"
//�ϰ���
class boss :public worker
{
public:
	boss(int ID, string name, int did);
	virtual void showInfo();//��ʾ������Ϣ
	virtual string getDeptname();//��ȡ��λ����

};
